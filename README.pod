=pod

=head1 NAME

Mojolicious::Plugin::FormFields - Use objects and data structures in your forms

=head1 SYNOPSIS

  # Mojolicious
  $self->plugin('FormFields', %options);

  # Mojolicious::Lite
  plugin 'FormFields', %options;

  # In your action
  sub edit
  {
      my $self = shift;
      my $user = $self->find_user($self->param('id'));
      $self->stash(user => $user);
  }

  # In your view
  %= field('user.name')->text
  %= field('user.age')->select([10,20,30])
  %= field('user.password')->password
  %= field('user.taste')->radio('Me gusta')
  %= field('user.taste')->radio('Estoy harto de')
  %= field('user.orders.0.id')->hidden

  # Fields for a collection
  % my $kinfolk = field('user.kinfolk');
  % for my $person (@$kinfolk) {
    %= $person->hidden('id')
    %= $person->text('name')
  % }

  # Or, scope it to the 'user' param
  % my $user = fields('user');
  %= $user->hidden('id')
  %= $user->text('name') 
  %= $user->label('admin') 	  
  %= $user->checkbox('admin') 
  %= $user->password('password')
  %= $user->select('age', [ [ X => 10], [Dub => 20] ])
  %= $user->file('avatar') 
  %= $user->textarea('bio', size => '10x50') 
   
  % my $kinfolk = $user->fields('kinfolk');
  % for my $person (@$kinfolk) {     
    %= $person->text('name')
    # ...
  % }

=head1 DESCRIPTION

L<Mojolicious::Plugin::FormFields> turns request parameters into nested data
structures and helps you bind the resulting structures/objects to form fields.

=head1 METHODS

=head2 field

  field($name)->text
  field($name, $object)->text

Create form fields

  %= field('user.name')->text

Is the same as

  %= text_field 'user.name', $user->name, id => 'user-name'

See L</SUPPORTED FIELDS> for the list of field creation methods.

If the expanded representation of the parameter exists in
L<the stash|Mojolicious::Controller/stash> it will be used as the default.
If a value for the flattened representation exists (e.g., from a form submission)
it will be used instead.

You can also supply the object or reference to retrieve the value from

  %= field('book.upc', $item)->text

=head3 Arguments

C<$name>

The name of the parameter.

C<$object>

Optional. The object to retrieve the default value from. Must be a reference to a
hash, an array, or something blessed. If not given the value will be retrieved from
the stash or, for previously submitted forms, the request parameter C<$name>.

=head3 Returns

HTML form field

=head3 Errors

An error will be raised if:

=over 4

=item * C<$name> is not provided

=item * C<$name> cannot be retrieved from C<$object>.

=item * C<$object> cannot be found in the stash and no default was given

=back

=head2 fields

  $f = fields($name)
  $f->text('address')

  $f = fields($name, $object)
  $f->text('address')

Create form fields scoped to a parameter. 

For example

  % $f = fields('user')
  %= $f->select('age', [10,20,30])
  %= $f->textarea('bio')

This is the same as

  %= field('user.age')->select([10,20,30])
  %= field('user.bio')->textarea

=head3 Arguments

Same as L</field>. 

=head3 Returns

An object to create HTML form fields scoped to the C<$name> argument

=head3 Errors

Same as L</field>. 

=head2 Collections

You can create fields scoped to elements in an array by dereferencing the field object 

  % my $addressees = field('user.addressees');
  %= for my $addr (@$addressees) { 
    %# field('user.addressees.N.id')->hidden
    %= $addr->hidden('id')

    %# field('user.addressees.N.street')->text
    %= $addr->text('street')

    %# field('user.addressees.N.city')->select([qw|OAK PHL LAX|])
    $addr->select('city', [qw|OAK PHL LAX|])
  % }

=head1 SUPPORTED FIELDS

=head2 checkbox

  field('user.admin')->checkbox(%options)
  field('user.admin')->checkbox('yes', %options)

Creates

  <input type="checkbox" name="user.admin" id="user-admin-1" value="1"/>
  <input type="checkbox" name="user.admin" id="user-admin-yes" value="yes"/>

=head2 file

  field('user.avatar')->file;

Creates

  <input id="user-avatar" name="user.avatar" type="file" />

=head2 hidden

  field('user.id')->hidden

Creates

  <input id="user-id" name="user.id" type="hidden" value="123123" />


=head2 label

  field('user.name')->label
  field('user.name')->label('Nombre', for => "tu_nombre_hyna")

Creates

  <label for="user-name">Name</label>
  <label for="tu_nombre_hyna">Nombre</label>

=head2 password

  field('user.password')->password

Creates

  <input id="user-password" name="user.password" type="password" />

=head2 select

  field('user.age')->select([10,20,30])
  field('user.age')>->select('age', [[Ten => 10], [Dub => 20], [Trenta => 30]]) %>

Creates

  <select id="user-age" name="user.age">
    <option value="10">10</option>
    <option value="20">20</option>
    <option value="30" selected="selected">30</option>
  </select>

  <select id="user-age" name="user.age">
    <option value="10">Ten</option>
    <option value="20">Dub</option>
    <option value="30" selected="selected">Trenta</option>
  </select>

=head2 radio

  field('user.age')->radio('age', 'older_than_21')

Creates

  <input id="user-age-older_than_21" name="user.age" type="radio" value="older_than_21" />

=head2 text

  field('user.name')->text
  field('user.name')->text(size => 10, maxlength => 32)

Creates

  <input id="user-name" name="user.name" value="sshaw" />
  <input id="user-name" name="user.name" value="sshaw" size="10" maxlength="32" />

=head2 textarea

  field('user.bio')->textarea
  field('user.bio')->textarea(size => '10x50')

Creates

  <textarea id="user-bio" name="user.bio">Proprietary and confidential</textarea>
  <textarea cols="50" id="user-bio" name="user.bio" rows="10">Proprietary and confidential</textarea>

=head1 SEE ALSO

L<Mojolicious::Plugin::TagHelpers>, L<Mojolicious::Plugin::ParamExpand>, L<MojoX::Validator>
