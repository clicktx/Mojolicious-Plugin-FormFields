=pod

=head1 NAME

Mojolicious::Plugin::FormFields - Use objects and data structures in your forms

=head1 SYNOPSIS

  # Mojolicious
  $self->plugin('FormFields', %options);

  # Mojolicious::Lite
  plugin 'FormFields', %options;

  # In your action
  sub edit
  {
      my $self = shift;
      my $user = $self->find_user($self->param('id'));
      $self->stash(user => $user);
  }

  # In your view
  %= field('user.name')->text;
  %= field('user.age')->select([10,20,30]);
  %= field('user.password')->password;

  # Fields for a collection
  %= field('user.kinfolk')->each begin
    %= $_->hidden('id')
    %= $_->text('name')
  % end

  # Same as above
  % my $kinfolk = field('user.kinfolk');
  % for my $person (@$kinfolk) {
    %= $person->hidden('id')
    %= $person->text('name')
  % }
   
  # Scoped to user
  % my $f = fields('user');
  %= $f->text('name');
  %= $f->select('age', [10,20,30]);
  %= $f->password('password');

=head1 DESCRIPTION

L<Mojolicious::Plugin::FormFields> turns request parameters into nested data
structures using L<CGI::Expand> and helps you use these values in a form.

=head1 METHODS

=head2 field

Create form fields

  %= field('user.name')->text

Same as

  %= text_field 'user.name', $user->name, id => 'user-name'

If the expanded representation of the parameter exists in
L<the stash|Mojolicious::Controller/stash> it will be used as the default.
If a value for the flattened representation exists (e.g., from a form submission)
it will be used instead.

You can also supply the object or reference to retrieve the value from

  <%= field('book.upc', $item)->text %>

=head3 Arguments

C<$name>

The name of the parameter.

C<$object>

Optional. The object to retrieve the default value from. Must be a reference to a
hash, an array, or something blessed. If not given the value will be retrieved from
the stash or, for previously submitted forms, the request parameter C<$name>.

=head3 Returns

HTML form field

=head3 Errors

An error will be raised if:

=over 4

=item * C<$name> is not provided

=item * C<$name> cannot be retrieved from C<$object>.

=item * C<$object> cannot be found in the stash and no default was given

=back

=head2 fields

Create form fields scoped to a parameter. 

For example 

  % $f = fields('user')
  %= $f->select('age', [10,20,30])
  %= $f->textarea('bio')

Is the same as

  %= field('user.age')->select([10,20,30])
  %= field('user.bio')->textarea

=head2 each

Iterate over a collection scoping each element via C<<  L<fields> >>.

  %= field('user.addressees')->each begin
    %# field('user.addressees.N.id')->hidden
    %= $_->hidden('id')

    %# field('user.addressees.N.street')->text
    %= $_->text('street')

    %# field('user.addressees.N.city')->select([qw|OAK PHL LAX|])
    $_->select('city', [qw|OAK PHL LAX|])
  % end

=head1 SUPPORTED FIELDS

=head2 checkbox

  field('user.admin')->checkbox(%options)

  <input type="checkbox" name="user.admin" id="user-admin" value="1"/>

  field('user.admin')->checkbox('yes', %options)

  <input type="checkbox" name="user.admin" id="user-admin" value="yes"/>

=head2 file

  field('user.avatar')->file;

=head2 hidden

  field('user.id')->hidden

=head2 label

  field('user.name')->label
  <label for="user-name">Name</label>

  field('user.name')->label('Nombre', for => "tu_nombre_hyna")
  <label for="tu_nombre_hyna">Nombre</label>

  field('user.name')->label(for => 'x', class => 'y', sub {

  })

=head2 password

  field('user.password')->password

=head2 select

  field('user.age')->select([10,20,30])
  field('user.age')->select({10 => 'Ten', 20 => 'Dub', 30 => 'Trenta'}, %options)

=head2 radio

  field('user.age')->radio('21 & Over')

=head2 text

  field('user.name')->text
  field('user.name')->text(size => 10, maxlength => 32)

=head2 textarea

  field('user.bio')->textarea
  field('user.bio')->textarea(size => '5x30')

=head1 SEE ALSO

L<Mojolicious::Plugin::TagHelpers>, L<Mojolicious::Plugin::ParamExpand>
